security:

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                username_path: email
                password_path: password
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        index:
            pattern: ^/
            stateless: false
            jwt: ~
            logout:
              path: api_logout_check

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator


                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { path: ^/profile, roles: ROLE_USER }
         - { path: ^/api/login, roles: PUBLIC_ACCESS }
         - { path: ^/api/recherche_job, roles: PUBLIC_ACCESS }
         - { path: ^/api/recherche_job_byid, roles: PUBLIC_ACCESS }
         - { path: ^/api/register, roles: PUBLIC_ACCESS }
         - { path: ^/api/contact, roles: PUBLIC_ACCESS } # Contact
         - { path: ^/api/job_categories, roles: PUBLIC_ACCESS}
         - { path: ^/api/get_ad_byname, roles: PUBLIC_ACCESS}
         - { path: ^/api/set_anonymous_candidate, roles: PUBLIC_ACCESS}
         - { path: ^/api/companies_categorie, roles: PUBLIC_ACCESS}
         - { path: ^/api/get_user, roles: PUBLIC_ACCESS}
         - { path: ^/api/get_user_profilebyid, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/update_user_profile, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/create_ad, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_ad, roles: PUBLIC_ACCESS}
         - { path: ^/api/get_ad_byid, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_profile_anonymous_cv, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_profile_anonymous, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_user_candidate, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/update_ad, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/delete_ad, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/set_user_candidate, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/delete_job_category, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/add_job_category, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/update_companie_profile, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/api/get_user_profile, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_companie_profile, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_messages, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/get_message_byid, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/delete_message, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/api/send_message, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/upload_cv, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api/logout_check, roles: IS_AUTHENTICATED_FULLY}
         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY } # IS_AUTHENTICATED_FULLY # PUBLIC_ACCESS




when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
